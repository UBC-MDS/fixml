%YAML 1.2
---
Title: Checklist for Tests in Machine Learning Projects
# TODO: To be filled in later...
Description: Description about the project and its context
Test Areas:
  - General:
      Description: >
        The following items describe best practices for all tests to be
        written.
      Items:
        - Title: Write Descriptive Test Names
          Requirement: >
            Every test function should have a clear, descriptive name
          Explanation: >
            If out tests are narrow and sufficiently descriptive, the test
            name itself may give us enough information to start debugging.
            This also helps us to identify what is being tested inside the
            function.
          References:
            - https://testing.googleblog.com/2014/10/testing-on-toilet-writing-descriptive.html
            - https://testing.googleblog.com/2024/05/test-failures-should-be-actionable.html

        - Title: Keep Tests Focused
          Requirement: >
            Each test should only test one scenario, meaning that in each
            test we should only use one set of mock data.
          Explanation: >
            If we test multiple scenarios in a single test, it is hard to
            idenitfy exactly what went wrong. Keeping one scenario in a
            single test helps us to isolate problematic scenarios.
          References:
            - https://testing.googleblog.com/2018/06/testing-on-toilet-keep-tests-focused.html

        - Title: Prefer Narrow Assertions in Unit Tests
          Requirement: >
            The assertions inside the tests should be narrow, meaning that
            when checking a complex object, any unrelated behavior should
            not be tested - Assert on only relevant behaviors.
          Explanation: >
            If we have overly wide assertions (such as depending on every
            field of a complex output proto), the test may fail for many
            unimportant reasons. False positives are the opoosite of
            actionable.
          References:
            - https://testing.googleblog.com/2024/04/prefer-narrow-assertions-in-unit-tests.html

        - Title: Keep Cause and Effect Clear
          Requirement: >
            The modifications and the assertions of an object's behavior
            in a single test should not be far away from each other.
          Explanation: >
            Refrain from using large global test data structures shared
            across multiple unit tests. This will allow for clear
            identification of each test's setup and the cause and effect.
          References:
            - https://testing.googleblog.com/2017/01/testing-on-toilet-keep-cause-and-effect.html

  - Data Presence:
      Description: >
        The following items describe tests that need to be done for testing
        the presence of data.
      Items:
        - Title: Validate Data File Loading Functionality
          Requirement: >
            Verify that the function for loading data files operates correctly across various file formats and handles errors gracefully.
          Explanation: >
            This item ensures that the data loading mechanism is robust, correctly parses different file types, and provides useful error messages when unable to load data. This test is crucial for the initial steps of data handling in the pipeline.
          References:
            - https://microsoft.github.io/code-with-engineering-playbook
            - UBC-MDS
  
        - Title: Validate Data and Figures Saving Functionality
          Requirement: >
            Ensure that the function for saving data and figures operates correctly, saving files in the specified formats and locations without corruption or data loss.
          Explanation: >
            This item tests the reliability and effectiveness of the saving mechanism used in the project. It is crucial for preserving the results of data analyses and visualizations for future use or review.
          References:
            - https://microsoft.github.io/code-with-engineering-playbook
            - UBC-MDS

  - Data Quality:
      Description: >
        The following items describe tests that need to be done for testing
        the quality of data.
      Items:
        - Title: Verify File Content
          Requirement: >
            Ensure that all data files are non-empty and contain the necessary data to proceed with the analysis or processing tasks.
          Explanation: >
            This checklist item is crucial as it confirms the presence of usable data within the files. It prevents errors in later stages of the project by ensuring data is available from the start.
          References:
            - https://microsoft.github.io/code-with-engineering-playbook 
            - UBC-MDS
        
        - Title: Verify Data/Image Format
          Requirement: >
            Check that all data and images are in the formats expected by the processing algorithms (e.g., CSV, JPEG, PNG) and that their structure matches the expected schema.
          Explanation: >
            Ensuring that data and images are in the correct format is essential for compatibility with processing tools and algorithms, which may not handle unexpected formats gracefully.
          References:
            - https://microsoft.github.io/code-with-engineering-playbook 
            - UBC-MDS 

        - Title: Check for Nulls and Outliers
          Requirement: >
            Verify that the data files are free of null values and identify any outliers that may skew the results or affect the analysis.
          Explanation: >
            Null values can lead to errors or inaccurate computations in many data processing applications, while outliers can distort statistical analyses and models.
          References:
            - https://microsoft.github.io/code-with-engineering-playbook 
            - UBC-MDS 

  - Data Ingestion:
      Description: >
        The following items describe tests that need to be done for testing
        if the data is ingestion properly.
      Items:
        - Title: Dummy Title
          Requirement: >
            This is a dummy item and there is nothing needed to act on.
          Explanation: >
            This is a dummy item to show how the checklist items would be
            stored inside this YAML file. It serves no other propose.
          References:
            - http://128.0.0.1
            - UBC-MDS

  - Model Fitting:
      Description: >
        The following items describe tests that need to be done for testing
        the model fitting process.
      Items:
        - Title: Dummy Title
          Requirement: >
            This is a dummy item and there is nothing needed to act on.
          Explanation: >
            This is a dummy item to show how the checklist items would be
            stored inside this YAML file. It serves no other propose.
          References:
            - http://128.0.0.1
            - UBC-MDS

  - Model Evaluation:
      Description: >
        The following items describe tests that need to be done for testing
        the model evaluation process.
      Items:
        - Title: Dummy Title
          Requirement: >
            This is a dummy item and there is nothing needed to act on.
          Explanation: >
            This is a dummy item to show how the checklist items would be
            stored inside this YAML file. It serves no other propose.
          References:
            - http://128.0.0.1
            - UBC-MDS

  - Artifact Testing:
      Description: >
        The following items describe tests that need to be done for testing
        any artifacts that are created from the project.
      Items:
        - Title: Dummy Title
          Requirement: >
            This is a dummy item and there is nothing needed to act on.
          Explanation: >
            This is a dummy item to show how the checklist items would be
            stored inside this YAML file. It serves no other propose.
          References:
            - http://128.0.0.1
            - UBC-MDS
